generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String                @id @default(uuid())
  googleId        String                @unique
  name            String
  avatarUrl       String
  createdAt       DateTime              @default(now())
  playlists       Playlist[]
  favoriteSongs   UserFavoriteSongs[]
  favoriteArtists UserFavoriteArtists[]
  favoriteAlbums  UserFavoriteAlbums[]

  @@map("users")
}

model Song {
  id       String @id @default(uuid())
  iTunesId Int    @unique
  artistId String
  albumId  String

  name              String
  iTunesViewUrl     String   @unique
  portrait          String
  previewUrl        String   @unique
  releaseDate       DateTime
  durationInSeconds Int
  genre             String
  createdAt         DateTime @default(now())

  artist            Artist              @relation(fields: [artistId], references: [id])
  album             Album               @relation(fields: [albumId], references: [id])
  playlists         SongPlaylist[]
  usersWhoFavorited UserFavoriteSongs[]

  @@map("songs")
}

model SongPlaylist {
  id         String   @id @default(uuid())
  songId     String
  playlistId String
  addedAt    DateTime @default(now())

  song     Song     @relation(fields: [songId], references: [id])
  playlist Playlist @relation(fields: [playlistId], references: [id])

  @@map("songs_playlists")
}

model Playlist {
  id     String @id @default(uuid())
  userId String

  name        String
  description String?
  portrait    String?
  isPublic    Boolean   @default(true)
  isFixed     Boolean   @default(false)
  fixedAt     DateTime?
  createdAt   DateTime  @default(now())

  user  User           @relation(fields: [userId], references: [id])
  songs SongPlaylist[]

  @@map("playlists")
}

model Artist {
  id       String @id @default(uuid())
  iTunesId Int    @unique

  name          String
  iTunesViewUrl String   @unique
  genre         String
  createdAt     DateTime @default(now())

  albums            Album[]
  songs             Song[]
  usersWhoFavorited UserFavoriteArtists[]

  @@map("artists")
}

model Album {
  id       String @id @default(uuid())
  iTunesId Int    @unique
  artistId String

  name          String
  iTunesViewUrl String   @unique
  portrait      String
  releaseDate   DateTime
  genre         String
  createdAt     DateTime @default(now())

  songs             Song[]
  artist            Artist               @relation(fields: [artistId], references: [id])
  usersWhoFavorited UserFavoriteAlbums[]

  @@map("albums")
}

model UserFavoriteSongs {
  id          String   @id @default(uuid())
  userId      String
  songId      String
  favoritedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  song Song @relation(fields: [songId], references: [id])

  @@map("user_favorite_songs")
}

model UserFavoriteArtists {
  id          String   @id @default(uuid())
  userId      String
  artistId    String
  favoritedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  artist Artist @relation(fields: [artistId], references: [id])

  @@map("user_favorite_artists")
}

model UserFavoriteAlbums {
  id          String   @id @default(uuid())
  userId      String
  albumId     String
  favoritedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  album Album @relation(fields: [albumId], references: [id])

  @@map("user_favorite_albums")
}
